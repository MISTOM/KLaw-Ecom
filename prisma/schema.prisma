generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  refreshToken String?
  isVerified   Boolean  @default(false)
  imageId      Int?
  profileImage Image?   @relation(fields: [imageId], references: [id])
  roleId       Int
  role         Role     @relation(fields: [roleId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]
  Cart         Cart[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float
  quantity       Int
  serviceCode    String           @unique
  isPublished    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Image          Image[]
  ProductOnOrder ProductOnOrder[]
  CartItem       CartItem[]
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  User      User[]
}

model Category {
  id        Int         @id @default(autoincrement())
  name      Categories?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //TODO: Add indexes
  // @@index([cartId])
  // @@index([productId])
}

model Order {
  id             Int              @id @default(autoincrement())
  totalPrice     Float
  userId         Int
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductOnOrder ProductOnOrder[]
}

model ProductOnOrder {
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  isIssued  Boolean @default(false)

  @@id([orderId, productId])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      Roles    @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

enum Roles {
  ADMIN
  USER
}

enum Categories {
  History
}
