generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  idNumber     Int?
  phoneNumber  String?
  address      String?
  postalCode   String?  // Added field
  refreshToken String?
  isVerified   Boolean  @default(false)
  imageId      Int?
  profileImage Image?   @relation(fields: [imageId], references: [id])
  roleId       Int
  role         Role     @relation(fields: [roleId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]
  Cart         Cart[]
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Float
  quantity        Int
  author          String
  pageCount       Int
  publicationDate DateTime
  serviceCode     String           @unique
  isPublished     Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Image           Image[]
  categories      Category[]       @relation("ProductCategory") // implicit many to many relationship ref: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#implicit-many-to-many-relations
  ProductOnOrder  ProductOnOrder[]
  CartItem        CartItem[]
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Products  Product[] @relation("ProductCategory") // implicit many to many relationship
}

//explicit many to many relationship
// model ProductCategory {
//   id         Int      @default(autoincrement())
//   productId  Int
//   categoryId Int
//   product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@id([productId, categoryId])
// }

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance: Add indexes
  // @@index([cartId])
  // @@index([productId])
}

model Order {
  id             Int              @id @default(autoincrement())
  totalPrice     Float
  status         OrderStatus      @default(PENDING)
  billRefNumber  String           @unique
  invoiceNumber  String?          @unique
  description    String?
  userId         Int
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductOnOrder ProductOnOrder[]
}

model ProductOnOrder {
  orderId   Int
  productId Int
  quantity  Int
  isIssued  Boolean @default(false)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model ConvenienceFee {
  id        Int      @id @default(autoincrement())
  name      String?
  amount    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        Int      @id @default(autoincrement())
  name      Roles    @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Roles {
  ADMIN
  USER
}
